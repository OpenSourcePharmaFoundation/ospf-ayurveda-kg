Note: add unique constraint scripts
CREATE CONSTRAINT gene_unique
FOR (g:Gene) REQUIRE g.name IS UNIQUE

CREATE CONSTRAINT interactions_unique
FOR ()-[r:GENE_INTERACTION]-() REQUIRE (r.interaction_id) IS UNIQUE

//Load Ayurvedic Formulations
LOAD CSV WITH HEADERS FROM 'file:///ayurvedic_formulation.csv' AS row
WITH row['Scientific name of the ingredient'] AS scientificName, row['Sanskrit Name of the ingredient'] AS sanskritName, row['Formulation'] AS formulationName
MERGE (p:Plant {scientificName: scientificName})
    SET p.scientificName = scientificName, p.sanskritName = sanskritName
MERGE (f:Formulation {formulationName:formulationName})
    SET f.formulationName = f.formulationName
MERGE (f)-[rel:CONTAINS]->(p)
return p, rel, f;

//Load chemical-target interactions for phytochemicals from pubmed
LOAD CSV WITH HEADERS FROM 'file:///neo4j_target_interactions.csv' AS row with row where row.gene_name is not NULL
MATCH (c:Compound {pubchemId:row.cid})
SET c.pubchemName = row.pubchem_name
SET c.otherNames = [row.source_cmpnd_name]
MERGE (g:Gene{name:row.gene_name})
SET g.name = row.gene_name
SET g.otherNames = [row.source_gene_name]
CREATE (c)-[rel:GENE_INTERACTION{action:row.action, pubchemId:row.interaction_id, source:row.info_source, evidence:row.evidences, evidence_urls:row.evidence_urls}]->(g)

//Load phytochemical imppat ID-pubchem url data
LOAD CSV FROM 'file:///pubchem_url_to_imppat_id.csv' AS row
WITH row[0] AS pubchem_url, row[1] AS imppatId 
MERGE (c:Compound {imppatId: imppatId})
    SET c.pubchemUrl = pubchem_url

//Load phytochemical-imppat ID data
LOAD CSV FROM 'file:///phytochem_name_to_id.csv' AS row
WITH row[0] AS phytochem_name, row[1] AS imppatId 
MERGE (c:Compound {name: phytochem_name})
    SET c.imppatId = imppatId

// Load plant-phytochemical IMPPAT relationships
CALL apoc.load.json('file:///plant_phytochemicals.json') YIELD value
WITH value.phytochemicals as phytos, value.plant as plant
UNWIND phytos as phyto
MERGE(p:Plant {scientificName: plant})
MERGE(c:Compound {name: phyto})
    SET c.type = "phytochemical"
    SET c.source = "IMPPAT"
MERGE (p)-[rel:PRODUCES]->(c)
RETURN *

// Load plant-therapeutic use IMPPAT relationships
CALL apoc.load.json('file:///plant_therapeutic_use.json') YIELD value
WITH value.therapeutic_use as uses, value.plant as plant
UNWIND uses as use_ref
MERGE(p:Plant {scientificName: plant})
MERGE(a:Therapeutic_Area {name: use_ref[0]})
    SET a.type = "therapeutic use"
    SET a.source = "IMPPAT"
MERGE (p)-[rel:TREATS{Reference:use_ref[1]}]->(a)

MATCH (n:Plant)-[p]->(h:Compound)-[r]->(c)
WHERE c.name = 'PDGFRB' or c.name = 'COL1A2' or c.name = 'CDH1' or c.name =  'DDR2' or c.name = 'COL3A1' or c.name = 'COL2A1' or c.name = 'COL1A1' or c.name = 'COL5A2'
RETURN n.scientificName, count(r) ORDER BY count(r)

//Remove incorrect pubchem url's
MATCH (c:Compound where left(c.pubchemUrl, 4)='/imp')
REMOVE c.pubchemUrl